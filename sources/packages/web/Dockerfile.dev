# "builder" stage, based on Node.js, to build and compile the frontend.
FROM node:24.9.0-alpine3.21 AS builder

# Application Port.
ENV PORT=8080

# Setting app as work dir.
WORKDIR /app

# Copying sources.
COPY ./src ./src
COPY ./nginx ./nginx
COPY ./public ./public
COPY ./index.html ./vite.config.ts ./tsconfig.json ./package*.json ./

# Installing dependencies.
RUN npm ci

# Replace ${PORT} variable in the template and save as default.conf.
RUN sed 's/${PORT}/'"${PORT}"'/g' nginx/default.conf.dev.template > default.conf

# Building app
RUN npm run build-local

# Get a nginx image to have only the compiled app in the resulting image.
FROM nginx:1.22 AS deployer

RUN mkdir -p /opt/app-root/src \
 && mkdir -p /etc/nginx/conf.d
# Copy the app built on builder stage to the resulting container.
COPY --from=builder /app/dist /opt/app-root/src

# Copy the default.conf to /etc/nginx/conf.d
COPY --from=builder /app/default.conf /etc/nginx/conf.d/default.conf

# Copying the main configuration file.
COPY --from=builder /app/nginx/nginx.conf /etc/nginx/nginx.conf

# Changing ownership of some nginx directories as it will run as nginx user.
RUN chown nginx /var/cache/nginx/ -R
RUN chown nginx /etc/nginx/ -R

# Set a nginx user to run the process.
USER nginx

# Daemon off makes nginx to run on the foreground with only one process.
# Docker will kill the container if the process dies.
CMD ["nginx", "-g", "daemon off;"]