# "builder" stage, based on Node.js, to build and compile the frontend.
FROM node:18.18.2-alpine3.18 AS builder

LABEL maintainer="BC GOV"

# Application Port.
ENV PORT 8080

# Setting app as work dir.
WORKDIR /app

# Copying package.json and package-lock.json.
COPY ./package*.json ./

# Installing dependencies.
RUN npm ci

# Copying sources.
COPY . .

# Building app
RUN npm run build-local

# Get a nginx image to have only the compiled app in the resulting image.
FROM nginx:1.22 AS deployer

RUN mkdir -p /opt/app-root/src

RUN mkdir /etc/nginx/templates

# Copy the app built on builder stage to the resulting container.
COPY --from=builder /app/dist /opt/app-root/src

# Copying the main configuration file.
COPY nginx.conf /etc/nginx/nginx.conf

# Copying the configuration template file to templates dir. 
# It will be processed to transform the vars in the template files into 
# evaluated values and save the resulting files into /etc/nginx/conf.d/ dir.
COPY default.conf.template /etc/nginx/templates/

# Changing ownwership of some nginx directories as it will run as nginx user.
RUN chown nginx /var/cache/nginx/ -R
RUN chown nginx /etc/nginx/ -R

# Set a nginx user to run the process.
USER nginx

# Daemon off makes nginx to run on the foreground with only one process.
# Docker will kill the container if the process dies.
CMD ["nginx", "-g", "daemon off;"]