<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:modeler="http://camunda.org/schema/modeler/1.0" id="Definitions_0cjijbh" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="4.6.0" modeler:executionPlatform="Camunda Platform" modeler:executionPlatformVersion="7.15.0">
  <bpmn:process id="disbursement-schedule-gateway" name="Disbursement Schedule Gateway" isExecutable="true">
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_1bh2hll</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:endEvent id="Event_0dxrqac">
      <bpmn:incoming>Flow_03p09tx</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:serviceTask id="Activity_00bh6vj" name="Save disbursement data to SIMS DB">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="javaScript">var disbursementSchedulesPayload = execution.getVariable(
  "disbursementSchedulesPayload"
);

execution.setVariable(
  "schedulesJsonString",
  JSON.stringify(disbursementSchedulesPayload)
);

JSON.stringify(disbursementSchedulesPayload);</camunda:script>
            </camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="accept">application/json</camunda:entry>
                <camunda:entry key="Authorization">Bearer ${simsApiAccessToken}</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="url">${simsApiUrl}/system-access/application/${applicationId}/disbursements</camunda:inputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0x6ecq2</bpmn:incoming>
      <bpmn:outgoing>Flow_03p09tx</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_1bh2hll" sourceRef="StartEvent_1" targetRef="Activity_04gsgby" />
    <bpmn:sequenceFlow id="Flow_0oihh9c" sourceRef="Activity_0ektnc9" targetRef="Activity_1ce72s2" />
    <bpmn:sequenceFlow id="Flow_03p09tx" sourceRef="Activity_00bh6vj" targetRef="Event_0dxrqac" />
    <bpmn:scriptTask id="Activity_04gsgby" name="calculate 1st and 2nd Disbursement Date" scriptFormat="javascript">
      <bpmn:incoming>Flow_1bh2hll</bpmn:incoming>
      <bpmn:outgoing>Flow_1pzqmu4</bpmn:outgoing>
      <bpmn:script>var firstDisbursementDate;
var secondDisbursementDate;

var weeks = execution.getVariable("weeks");
var studyEndDate = execution.getVariable("studyEndDate");

var studyStartDate = execution.getVariable("studyStartDate");
var studyStartDateObj = new Date(studyStartDate);

function formatDateToString(date) {
  var d = new Date(date),
    month = "" + (d.getUTCMonth() + 1),
    day = "" + d.getUTCDate(),
    year = d.getUTCFullYear();

  if (month.length &lt; 2) month = "0" + month;
  if (day.length &lt; 2) day = "0" + day;

  return [year, month, day].join("-");
}

var currentDateString = formatDateToString(new Date());

execution.setVariable("currentDateString", currentDateString);

studyStartDateGreaterThanCurrentDate =
  Date.parse(studyStartDateObj) &gt; Date.parse(new Date(currentDateString));

execution.setVariable(
  "studyStartDateGreaterThanCurrentDate",
  studyStartDateGreaterThanCurrentDate
);

if (
  (offeringIntensity == "Full Time" &amp;&amp;
    federalAssessmentNeed + provincialAssessmentNeed &gt; 0) ||
  (offeringIntensity == "Part Time" &amp;&amp; totalFinancialNeed &gt; 0)
) {
  if (studyStartDateGreaterThanCurrentDate) {
    firstDisbursementDate = formatDateToString(studyStartDate);
  } else {
    firstDisbursementDate = currentDateString;
  }
}
execution.setVariable("firstDisbursementDate", firstDisbursementDate);

//if less than 17, then disbursement schedule displays
//single disbursement 100% all eligible loan and grant amount
// else calculate the 2nd disbursement date
if (weeks &gt;= 17) {
  // calculate mid date of the study period
  var studyMidDate = new Date(
    (new Date(studyStartDate).getTime() + new Date(studyEndDate).getTime()) / 2
  );
  execution.setVariable("studyMidDate", formatDateToString(studyMidDate));
  if (firstDisbursementDate) {
    var firstDisbursementDateObj = new Date(firstDisbursementDate);
    if (!(Date.parse(firstDisbursementDateObj) &gt; Date.parse(studyMidDate))) {
      if (
        !(Date.parse(studyMidDate) &gt; Date.parse(new Date(currentDateString)))
      ) {
        secondDisbursementDate = currentDateString;
      } else {
        secondDisbursementDate = formatDateToString(studyMidDate);
      }
      execution.setVariable("secondDisbursementDate", secondDisbursementDate);
    }
  }
}
</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:scriptTask id="Activity_0ektnc9" name="Prepare Payload" scriptFormat="javascript">
      <bpmn:incoming>Flow_0ahpers</bpmn:incoming>
      <bpmn:incoming>Flow_0opcude</bpmn:incoming>
      <bpmn:outgoing>Flow_0oihh9c</bpmn:outgoing>
      <bpmn:script>var firstDisbursementDate = execution.getVariable("firstDisbursementDate");
var secondDisbursementDate = execution.getVariable("secondDisbursementDate");

var CSPTPayload = execution.getVariable("CSPTPayload");
var CSGPPayload = execution.getVariable("CSGPPayload");
var CSGDPayload = execution.getVariable("CSGDPayload");
var CSGFPayload = execution.getVariable("CSGFPayload");
var CSGTPayload = execution.getVariable("CSGTPayload");
var SBSDPayload = execution.getVariable("SBSDPayload");
var BGPDPayload = execution.getVariable("BGPDPayload");
var BCAGPayload = execution.getVariable("BCAGPayload");
var BCSGPayload = execution.getVariable("BCSGPayload");
var BCSLPayload = execution.getVariable("BCSLPayload");
var CSLPayload = execution.getVariable("CSLPayload");
var CSLPPayload = execution.getVariable("CSLPPayload");

var schedulesJson = {};
var disbursements = [];
if (CSPTPayload &amp;&amp; Object.keys(CSPTPayload).length &gt; 0) {
  disbursements.push(CSPTPayload);
}
if (CSLPPayload &amp;&amp; Object.keys(CSLPPayload).length &gt; 0) {
  disbursements.push(CSLPPayload);
}
if (CSGPPayload &amp;&amp; Object.keys(CSGPPayload).length &gt; 0) {
  disbursements.push(CSGPPayload);
}
if (CSGDPayload &amp;&amp; Object.keys(CSGDPayload).length &gt; 0) {
  disbursements.push(CSGDPayload);
}
if (CSGFPayload &amp;&amp; Object.keys(CSGFPayload).length &gt; 0) {
  disbursements.push(CSGFPayload);
}
if (CSGTPayload &amp;&amp; Object.keys(CSGTPayload).length &gt; 0) {
  disbursements.push(CSGTPayload);
}
if (SBSDPayload &amp;&amp; Object.keys(SBSDPayload).length &gt; 0) {
  disbursements.push(SBSDPayload);
}
if (BGPDPayload &amp;&amp; Object.keys(BGPDPayload).length &gt; 0) {
  disbursements.push(BGPDPayload);
}
if (BCAGPayload &amp;&amp; Object.keys(BCAGPayload).length &gt; 0) {
  disbursements.push(BCAGPayload);
}
// bc total grant
if (BCSGPayload &amp;&amp; Object.keys(BCSGPayload).length &gt; 0) {
  disbursements.push(BCSGPayload);
}

if (firstDisbursementDate &amp;&amp; secondDisbursementDate) {
  var disbursements1 = disbursements;
  var disbursements2 = disbursements;
  // bc loan
  if (BCSLPayload &amp;&amp; Object.keys(BCSLPayload).length &gt; 0) {
    var disbursements2 = [].concat(disbursements, BCSLPayload);
  }
  //canada loan
  if (CSLPayload &amp;&amp; Object.keys(CSLPayload).length &gt; 0) {
    var disbursements1 = [].concat(disbursements, CSLPayload);
  }

  // check if net sum disbursements1 value amount
  var disbursementsNetAmountSum1 = 0;
  disbursements1.forEach(function (each1) {
    disbursementsNetAmountSum1 += parseFloat(each1.valueAmount)
      ? parseFloat(each1.valueAmount)
      : 0;
  });

  // check if net sum disbursements2 value amount
  var disbursementsNetAmountSum2 = 0;
  disbursements2.forEach(function (each2) {
    disbursementsNetAmountSum2 += parseFloat(each2.valueAmount)
      ? parseFloat(each2.valueAmount)
      : 0;
  });

  // disbursements 1 will have 100% canada loan,
  // and 50% of all other canada and BC grants,
  // it will not have BC loan.
  // todo: negotiatedExpiryDate- update correct date, future req
  var disbursementData1 = {};
  if (disbursements1.length &gt; 0 &amp;&amp; disbursementsNetAmountSum1 &gt; 0) {
    var disbursementData1 = {
      disbursementDate: firstDisbursementDate,
      negotiatedExpiryDate: firstDisbursementDate,
      disbursements: disbursements1,
    };
  }
  // disbursements 2 will have 100% BC loan,
  // and 50% of all other canada and BC grants,
  // it will not have Canada loan.
  // Incase if all grants and canada loan are null
  // then there will be only first disbursement date with
  // 100% BC loan
  // todo: negotiatedExpiryDate- update correct date, future req
  var disbursementData2 = {};
  if (disbursements2.length &gt; 0 &amp;&amp; disbursementsNetAmountSum2 &gt; 0) {
    var disbursementData2 = {
      disbursementDate:
        disbursements1.length &gt; 0 &amp;&amp; disbursementsNetAmountSum1 &gt; 0
          ? secondDisbursementDate
          : firstDisbursementDate,
      negotiatedExpiryDate:
        disbursements1.length &gt; 0 &amp;&amp; disbursementsNetAmountSum1 &gt; 0
          ? secondDisbursementDate
          : firstDisbursementDate,
      disbursements: disbursements2,
    };
  }

  if (
    Object.keys(disbursementData1).length &gt; 0 ||
    Object.keys(disbursementData2).length &gt; 0
  ) {
    var schedulesJson = {
      schedules: [],
    };
    if (Object.keys(disbursementData1).length &gt; 0) {
      schedulesJson.schedules.push(disbursementData1);
    }

    if (Object.keys(disbursementData2).length &gt; 0) {
      schedulesJson.schedules.push(disbursementData2);
    }
  }
} else if (firstDisbursementDate &amp;&amp; !secondDisbursementDate) {
  // there will be only one disbursement, and it
  // will have 100% canada loan and 100% BC loan,
  // and 100% of all other canada and BC grants,

  // bc loan
  if (BCSLPayload &amp;&amp; Object.keys(BCSLPayload).length &gt; 0) {
    disbursements.push(BCSLPayload);
  }
  //canada loan
  if (CSLPayload &amp;&amp; Object.keys(CSLPayload).length &gt; 0) {
    disbursements.push(CSLPayload);
  }

  // check if net sum disbursements value amount
  var disbursementsNetAmountSum = 0;
  disbursements.forEach(function (each) {
    disbursementsNetAmountSum += parseFloat(each.valueAmount)
      ? parseFloat(each.valueAmount)
      : 0;
  });

  // There will be only disbursements will have 100% canada loan,
  // and 100% of all other canada and BC grants,
  // and 100% BC loan.
  // todo: negotiatedExpiryDate- update correct date, future req
  var disbursementData = {};
  if (disbursements.length &gt; 0 &amp;&amp; disbursementsNetAmountSum &gt; 0) {
    var disbursementData = {
      disbursementDate: firstDisbursementDate,
      negotiatedExpiryDate: firstDisbursementDate,
      disbursements: disbursements,
    };
  }

  if (Object.keys(disbursementData).length &gt; 0) {
    var schedulesJson = {
      schedules: [disbursementData],
    };
  }
}
execution.setVariable("disbursementSchedulesPayload", schedulesJson);</bpmn:script>
    </bpmn:scriptTask>
    <bpmn:exclusiveGateway id="Gateway_1tnmx63">
      <bpmn:incoming>Flow_1pzqmu4</bpmn:incoming>
      <bpmn:outgoing>FullTimeFlow</bpmn:outgoing>
      <bpmn:outgoing>PartTimeFlow</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="FullTimeFlow" name="Full Time Flow" sourceRef="Gateway_1tnmx63" targetRef="FullTimeDisbursementCalculation">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${offeringIntensity == "Full Time"}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="PartTimeFlow" name="Part Time Flow" sourceRef="Gateway_1tnmx63" targetRef="PartTimeDisbursementCalculation">
      <bpmn:conditionExpression xsi:type="bpmn:tFormalExpression">${offeringIntensity == "Part Time"}</bpmn:conditionExpression>
    </bpmn:sequenceFlow>
    <bpmn:sequenceFlow id="Flow_0ahpers" sourceRef="FullTimeDisbursementCalculation" targetRef="Activity_0ektnc9" />
    <bpmn:sequenceFlow id="Flow_0opcude" sourceRef="PartTimeDisbursementCalculation" targetRef="Activity_0ektnc9" />
    <bpmn:sequenceFlow id="Flow_1pzqmu4" sourceRef="Activity_04gsgby" targetRef="Gateway_1tnmx63" />
    <bpmn:callActivity id="FullTimeDisbursementCalculation" name="Full Time Disbursement Calculation" calledElement="ft-disbursement-calculation">
      <bpmn:extensionElements>
        <camunda:in source="BGPDEligibility" target="BGPDEligibility" />
        <camunda:in source="CSGTUEligibility" target="CSGTUEligibility" />
        <camunda:in source="CSGPEligibility" target="CSGPEligibility" />
        <camunda:in source="CSGDEligibility" target="CSGDEligibility" />
        <camunda:in source="CSGFTEligibility" target="CSGFTEligibility" />
        <camunda:in source="SBSDEligibility" target="SBSDEligibility" />
        <camunda:in source="provincialBCSLAmount" target="provincialBCSLAmount" />
        <camunda:in source="provincialBCAGAmount" target="provincialBCAGAmount" />
        <camunda:in source="provincialSBSDAmount" target="provincialSBSDAmount" />
        <camunda:in source="provincialBGPDAmount" target="provincialBGPDAmount" />
        <camunda:in source="federalCSGPAmount" target="federalCSGPAmount" />
        <camunda:in source="federalCSGDAmount" target="federalCSGDAmount" />
        <camunda:in source="federalCSGFTAmount" target="federalCSGFTAmount" />
        <camunda:in source="federalCSGTUAmount" target="federalCSGTUAmount" />
        <camunda:in source="federalCSLAmount" target="federalCSLAmount" />
        <camunda:in source="BCAGEligibility" target="BCAGEligibility" />
        <camunda:in source="BCAG2YearEligibility" target="BCAG2YearEligibility" />
        <camunda:out source="CSLPayload" target="CSLPayload" />
        <camunda:out source="CSGPPayload" target="CSGPPayload" />
        <camunda:out source="CSGDPayload" target="CSGDPayload" />
        <camunda:out source="CSGFPayload" target="CSGFPayload" />
        <camunda:out source="CSGTPayload" target="CSGTPayload" />
        <camunda:out source="SBSDPayload" target="SBSDPayload" />
        <camunda:out source="BGPDPayload" target="BGPDPayload" />
        <camunda:out source="BCAGPayload" target="BCAGPayload" />
        <camunda:out source="BCSLPayload" target="BCSLPayload" />
        <camunda:out source="BCSGPayload" target="BCSGPayload" />
        <camunda:in source="firstDisbursementDate" target="firstDisbursementDate" />
        <camunda:in source="secondDisbursementDate" target="secondDisbursementDate" />
      </bpmn:extensionElements>
      <bpmn:incoming>FullTimeFlow</bpmn:incoming>
      <bpmn:outgoing>Flow_0ahpers</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:callActivity id="PartTimeDisbursementCalculation" name="Part Time Disbursement Calculation" calledElement="pt-disbursement-calculation">
      <bpmn:extensionElements>
        <camunda:in source="CSGPPDGrant" target="CSGPPDGrant" />
        <camunda:in source="CSGPTGrant" target="CSGPTGrant" />
        <camunda:in source="CSGPTDEPGrant" target="CSGPTDEPGrant" />
        <camunda:in source="CSLPTGrant" target="CSLPTGrant" />
        <camunda:in source="BCAGPTGrant" target="BCAGPTGrant" />
        <camunda:in source="SBSDGrant" target="SBSDGrant" />
        <camunda:in source="firstDisbursementDate" target="firstDisbursementDate" />
        <camunda:in source="secondDisbursementDate" target="secondDisbursementDate" />
        <camunda:out source="CSLPPayload" target="CSLPPayload" />
        <camunda:out source="CSGPPayload" target="CSGPPayload" />
        <camunda:out source="CSGDPayload" target="CSGDPayload" />
        <camunda:out source="CSPTPayload" target="CSPTPayload" />
        <camunda:out source="BCAGPayload" target="BCAGPayload" />
        <camunda:out source="SBSDPayload" target="SBSDPayload" />
      </bpmn:extensionElements>
      <bpmn:incoming>PartTimeFlow</bpmn:incoming>
      <bpmn:outgoing>Flow_0opcude</bpmn:outgoing>
    </bpmn:callActivity>
    <bpmn:serviceTask id="Activity_1ce72s2" name="Get Token">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="payload">grant_type=client_credentials</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Content-Type">application/x-www-form-urlencoded</camunda:entry>
                <camunda:entry key="Authorization">Basic ${base64userpass}</camunda:entry>
                <camunda:entry key="Accept">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="url">${keycloakURL}/auth/realms/${realm}/protocol/openid-connect/token</camunda:inputParameter>
            <camunda:outputParameter name="simsApiAccessToken">${S(response).prop("access_token").stringValue()}</camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
      <bpmn:incoming>Flow_0oihh9c</bpmn:incoming>
      <bpmn:outgoing>Flow_0x6ecq2</bpmn:outgoing>
    </bpmn:serviceTask>
    <bpmn:sequenceFlow id="Flow_0x6ecq2" sourceRef="Activity_1ce72s2" targetRef="Activity_00bh6vj" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="disbursement-schedule-gateway">
      <bpmndi:BPMNEdge id="Flow_1pzqmu4_di" bpmnElement="Flow_1pzqmu4">
        <di:waypoint x="340" y="200" />
        <di:waypoint x="395" y="200" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0opcude_di" bpmnElement="Flow_0opcude">
        <di:waypoint x="620" y="280" />
        <di:waypoint x="720" y="280" />
        <di:waypoint x="720" y="240" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ahpers_di" bpmnElement="Flow_0ahpers">
        <di:waypoint x="620" y="130" />
        <di:waypoint x="720" y="130" />
        <di:waypoint x="720" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0m0cdwu_di" bpmnElement="PartTimeFlow">
        <di:waypoint x="420" y="225" />
        <di:waypoint x="420" y="280" />
        <di:waypoint x="520" y="280" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="399" y="293" width="74" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1nrutcz_di" bpmnElement="FullTimeFlow">
        <di:waypoint x="420" y="175" />
        <di:waypoint x="420" y="120" />
        <di:waypoint x="520" y="120" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="414" y="93" width="72" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_03p09tx_di" bpmnElement="Flow_03p09tx">
        <di:waypoint x="1030" y="200" />
        <di:waypoint x="1062" y="200" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0oihh9c_di" bpmnElement="Flow_0oihh9c">
        <di:waypoint x="770" y="200" />
        <di:waypoint x="800" y="200" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0x6ecq2_di" bpmnElement="Flow_0x6ecq2">
        <di:waypoint x="900" y="200" />
        <di:waypoint x="930" y="200" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1bh2hll_di" bpmnElement="Flow_1bh2hll">
        <di:waypoint x="188" y="200" />
        <di:waypoint x="240" y="200" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="182" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1y6cnrq_di" bpmnElement="Activity_00bh6vj">
        <dc:Bounds x="930" y="160" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0dfo8bs_di" bpmnElement="Activity_1ce72s2">
        <dc:Bounds x="800" y="160" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_04a2cip_di" bpmnElement="Activity_04gsgby">
        <dc:Bounds x="240" y="160" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_118i21f_di" bpmnElement="Activity_0ektnc9">
        <dc:Bounds x="670" y="160" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1tnmx63_di" bpmnElement="Gateway_1tnmx63" isMarkerVisible="true">
        <dc:Bounds x="395" y="175" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0db4ffg_di" bpmnElement="FullTimeDisbursementCalculation">
        <dc:Bounds x="520" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0rrpp1a_di" bpmnElement="PartTimeDisbursementCalculation">
        <dc:Bounds x="520" y="240" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_0dxrqac_di" bpmnElement="Event_0dxrqac">
        <dc:Bounds x="1062" y="182" width="36" height="36" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
