name: Build and Deploy to OpenShift/Camunda - DEV

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - Segregate_DB_Migrations_Deployment
  workflow_dispatch:
    inputs:
      bumb:
        description: "Select the version."
        required: false
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - major
          - premajor
          - minor
          - preminor
          - patch
          - prepatch
      releaseType:
        description: "Select the release type. By default, only a tag will be created. If you want to create a release with the tag select the type."
        type: choice
        required: false
        options:
          - noRelease
          - draft
          - publish
env:
  NAMESPACE: ${{ secrets.OPENSHIFT_ENV_NAMESPACE }}
  HOST_PREFIX: ${{ secrets.HOST_PREFIX }}
  BUILD_NAMESPACE: 0c27fb-tools
  KEYCLOAK_REALM: "aestsims"
  KEYCLOAK_AUTH_URL: ${{ secrets.KEYCLOAK_AUTH_URL }}
  BCeID_WEB_SERVICE_WSDL: ${{ secrets.BCeID_WEB_SERVICE_WSDL }}
  SITE_MINDER_LOGOUT_URL: ${{ secrets.SITE_MINDER_LOGOUT_URL }}
  ATBC_LOGIN_ENDPOINT: ${{ secrets.ATBC_LOGIN_ENDPOINT }}
  ATBC_ENDPOINT: ${{ secrets.ATBC_ENDPOINT }}
  SWAGGER_ENABLED: true
  APPLICATION_ARCHIVE_DAYS: 43
  BYPASS_APPLICATION_SUBMIT_VALIDATIONS: ${{ secrets.BYPASS_APPLICATION_SUBMIT_VALIDATIONS }}
  BYPASS_CRA_INCOME_VERIFICATION: ${{ secrets.BYPASS_CRA_INCOME_VERIFICATION }}
  API_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  WORKERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  QUEUE_CONSUMERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  FORMS_SECRET_NAME: ${{ secrets.FORMS_SECRET_NAME }}
  QUEUE_PREFIX: ${{ secrets.QUEUE_PREFIX }}
  API_PORT: ${{ secrets.API_PORT }}
  WEB_PORT: ${{ secrets.WEB_PORT }}
  API: ${{ format('{0}api-sims', secrets.HOST_PREFIX) }}
  WEB: ${{ format('{0}web-sims', secrets.HOST_PREFIX) }}
  WORKERS: ${{ format('{0}workers-sims', secrets.HOST_PREFIX) }}
  QUEUE_CONSUMERS: ${{ format('{0}queue-consumers-sims', secrets.HOST_PREFIX) }}
  SWAGGER_NAME: ${{ format('{0}swagger', secrets.HOST_PREFIX) }}
  DATABASE_NAME_KEY: ${{ secrets.DATABASE_NAME_KEY }}

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    environment: DEV
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)

  # Create new tag.
  createTag:
    name: "Create tag"
    if:  github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' 
    runs-on: ubuntu-latest
    steps:
      - name: Get bumb value
        uses: haya14busa/action-cond@v1
        id: getBumb
        with:
          cond: ${{ github.event_name == 'workflow_dispatch'}}
          if_true: ${{ inputs.bumb }}
          if_false: 'prerelease'

      - name: Get preId value, if provided
        uses: haya14busa/action-cond@v1
        id: getPreId
        with:
          cond: ${{ github.event_name == 'workflow_dispatch' && (inputs.bumb == 'premajor' || inputs.bumb == 'preminor' || inputs.bumb == 'prepatch' || inputs.bumb == 'prerelease') }}
          if_true: ${{ inputs.bumb }}
          if_false: 'prerelease'
      - run: |
          echo "bumb: ${{ steps.getBumb.outputs.value }}"
          echo "preId: ${{ steps.getPreId.outputs.value }}"
  
      - id: createNextTag
        name: "Create tag"
        uses: zwaldowski/semver-release-action@v3
        with: 
          prefix: "v"
          preid: ${{ steps.getPreId.outputs.value }}       
          bump:  ${{ steps.getBumb.outputs.value }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "Tag ${{ steps.createNextTag.outputs.version_tag }} created!"
    outputs:
      newTag: ${{ steps.createNextTag.outputs.version_tag }}

  # Create new release.
  createRelease:
    name: "Create release"
    if: github.event_name == 'workflow_dispatch' && (inputs.releaseType == 'publish' || inputs.releaseType == 'draft')
    runs-on: ubuntu-latest
    needs: createTag
    steps:
      - name: Create release
        id: createNewRelease
        uses: Roang-zero1/github-create-release-action@v3
        with:
          created_tag: ${{ needs.createTag.outputs.newTag }}
          create_draft: ${{ inputs.releaseType == 'draft' }}
          release_title:  Release ${{ needs.createTag.outputs.newTag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "created release ${{ needs.createTag.outputs.newTag }} ${{ steps.createNewRelease.outputs.html_url }}!"

  # Build and run DB migrations.    
  build-run-db-migrations:
    name: Run db-migrations
    runs-on: ubuntu-latest
    needs: createTag
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Run Checkout and Login
        uses: checkout-and-login

      - name: Build db-migrations Image
        working-directory: "./devops"
        run: |
          make oc-build-db-migrations

      - name: Run db-migrations
        working-directory: "./devops/"
        run: |
          make oc-run-db-migrations

  # Build and deploy SIMS API.
  build-deploy-sims-api:
    name: Deploy SIMS-API
    runs-on: ubuntu-latest
    needs: build-run-db-migrations
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Run Checkout and Login
        uses: checkout-and-login

      - name: Build SIMS-API Image
        working-directory: "./devops"
        run: |
          make oc-build-api

      - name: Deploy SIMS-API
        working-directory: "./devops/"
        run: |
          make oc-deploy-api

  # Build and deploy workers.
  build-deploy-workers:
    name: Deploy Workers
    runs-on: ubuntu-latest
    needs: build-run-db-migrations
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Run Checkout and Login
        uses: checkout-and-login

      - name: Build Workers Image
        working-directory: "./devops"
        run: |
          make oc-build-workers

      - name: Deploy Workers
        working-directory: "./devops/"
        run: |
          make oc-deploy-workers

  # Build and deploy queue consumers.
  build-deploy-queue-consumers:
    name: Deploy Queue Consumers
    runs-on: ubuntu-latest
    needs: build-run-db-migrations
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Run Checkout and Login
        uses: checkout-and-login

      - name: Build Queue Consumers Image
        working-directory: "./devops"
        run: |
          make oc-build-queue-consumers

      - name: Deploy Queue Consumers
        working-directory: "./devops/"
        run: |
          make oc-deploy-queue-consumers

  # Build and Web/Frontend.
  build-deploy-web-frontend:
    name: Deploy Web/Frontend
    runs-on: ubuntu-latest
    needs: build-run-db-migrations
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Run Checkout and Login
        uses: checkout-and-login

      - name: Build Web/Frontend Image
        working-directory: "./devops"
        run: |
          make oc-build-web

      - name: Deploy Web/Frontend
        working-directory: "./devops/"
        run: |
          make oc-deploy-web
