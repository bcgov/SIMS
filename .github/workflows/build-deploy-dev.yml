name: Build and Deploy to OpenShift/Camunda - DEV

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      bumb:
        description: "Select the version."
        required: false
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - major
          - premajor
          - minor
          - preminor
          - patch
          - prepatch
      releaseType:
        description: "Select the release type. By default, only a tag will be created. If you want to create a release with the tag select the type."
        type: choice
        required: false
        options:
          - noRelease
          - draft
          - publish

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    environment: DEV
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)

  # Create new tag.
  createTag:
    name: "Create tag"
    if:  github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' 
    runs-on: ubuntu-latest
    steps:
      - name: Get bumb value
        uses: haya14busa/action-cond@v1
        id: getBumb
        with:
          cond: ${{ github.event_name == 'workflow_dispatch'}}
          if_true: ${{ inputs.bumb }}
          if_false: 'prerelease'

      - name: Get preId value, if provided
        uses: haya14busa/action-cond@v1
        id: getPreId
        with:
          cond: ${{ github.event_name == 'workflow_dispatch' && (inputs.bumb == 'premajor' || inputs.bumb == 'preminor' || inputs.bumb == 'prepatch' || inputs.bumb == 'prerelease') }}
          if_true: ${{ inputs.bumb }}
          if_false: 'prerelease'
      - run: |
          echo "bumb: ${{ steps.getBumb.outputs.value }}"
          echo "preId: ${{ steps.getPreId.outputs.value }}"
  
      - id: createNextTag
        name: "Create tag"
        uses: zwaldowski/semver-release-action@v3
        with: 
          prefix: "v"
          preid: ${{ steps.getPreId.outputs.value }}       
          bump:  ${{ steps.getBumb.outputs.value }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "Tag ${{ steps.createNextTag.outputs.version_tag }} created!"
    outputs:
      newTag: ${{ steps.createNextTag.outputs.version_tag }}

  # Create new release.
  createRelease:
    name: "Create release"
    if: github.event_name == 'workflow_dispatch' && (inputs.releaseType == 'publish' || inputs.releaseType == 'draft')
    runs-on: ubuntu-latest
    needs: createTag
    steps:
      - name: Create release
        id: createNewRelease
        uses: Roang-zero1/github-create-release-action@v3
        with:
          created_tag: ${{ needs.createTag.outputs.newTag }}
          create_draft: ${{ inputs.releaseType == 'draft' }}
          release_title:  Release ${{ needs.createTag.outputs.newTag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "created release ${{ needs.createTag.outputs.newTag }} ${{ steps.createNewRelease.outputs.html_url }}!"

  # Building all packages
  build:
    name: Building all packages
    environment: DEV
    runs-on: ubuntu-latest
    needs: createTag
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' 
    env:
      BUILD_NAMESPACE: 0c27fb-tools
      BUILD_REF: ${{ needs.createTag.outputs.newTag }}
      HOST_PREFIX: ${{ secrets.HOST_PREFIX }}
    steps:
      # Checkout the PR branch
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BUILD_REF
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.createTag.outputs.newTag }}
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
          if [ $? -ne 0 ]; then
            echo "Failed to log in to OpenShift. Please check the credentials and connection details."
            exit 1
          fi
       # Build the images in parallel.
      - name: Build db-migrations, api, workers, queues and web Images in parallel
        working-directory: "./devops"
        run: |
            make oc-build-db-migrations &
            make oc-build-api &
            make oc-build-workers &
            make oc-build-queue-consumers &
            make oc-build-web
      - name: Wait for parallel builds to finish
        run: |
          wait

  # Deploying all packages
  deployDev:
    name: Deploying all packages
    runs-on: ubuntu-latest
    environment: DEV
    needs:
      - build
      - createTag
    env:
      NAMESPACE: ${{ secrets.OPENSHIFT_ENV_NAMESPACE }}
      BUILD_REF: ${{ needs.createTag.outputs.newTag }}
      HOST_PREFIX: ${{ secrets.HOST_PREFIX }}
      BUILD_NAMESPACE: 0c27fb-tools
      KEYCLOAK_REALM: "aestsims"
      KEYCLOAK_AUTH_URL: ${{ secrets.KEYCLOAK_AUTH_URL }}
      BCeID_WEB_SERVICE_WSDL: ${{ secrets.BCeID_WEB_SERVICE_WSDL }}
      SITE_MINDER_LOGOUT_URL: ${{ secrets.SITE_MINDER_LOGOUT_URL }}
      ATBC_LOGIN_ENDPOINT: ${{ secrets.ATBC_LOGIN_ENDPOINT }}
      ATBC_ENDPOINT: ${{ secrets.ATBC_ENDPOINT }}
      SWAGGER_ENABLED: true
      APPLICATION_ARCHIVE_DAYS: 43
      BYPASS_APPLICATION_SUBMIT_VALIDATIONS: ${{ secrets.BYPASS_APPLICATION_SUBMIT_VALIDATIONS }}
      BYPASS_CRA_INCOME_VERIFICATION: ${{ secrets.BYPASS_CRA_INCOME_VERIFICATION }}
      API_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
      WORKERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
      QUEUE_CONSUMERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
      FORMS_SECRET_NAME: ${{ secrets.FORMS_SECRET_NAME }}
      QUEUE_PREFIX: ${{ secrets.QUEUE_PREFIX }}
      API_PORT: ${{ secrets.API_PORT }}
      WEB_PORT: ${{ secrets.WEB_PORT }}
      API: ${{ format('{0}api-sims', secrets.HOST_PREFIX) }}
      WEB: ${{ format('{0}web-sims', secrets.HOST_PREFIX) }}
      WORKERS: ${{ format('{0}workers-sims', secrets.HOST_PREFIX) }}
      QUEUE_CONSUMERS: ${{ format('{0}queue-consumers-sims', secrets.HOST_PREFIX) }}
      SWAGGER_NAME: ${{ format('{0}swagger', secrets.HOST_PREFIX) }}
      DATABASE_NAME_KEY: ${{ secrets.DATABASE_NAME_KEY }}
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo NAMESPACE: $NAMESPACE
          echo BRANCH: $BUILD_REF
          echo HOST_PREFIX: $HOST_PREFIX
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.createTag.outputs.newTag }}
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
          if [ $? -ne 0 ]; then
            echo "Failed to log in to OpenShift. Please check the openshift credentials and connection details."
            exit 1
          fi
      # Run db-migrations
      - name: Run db-migrations
        working-directory: "./devops/"
        run: |
          make oc-run-db-migrations
          if [ $? -ne 0 ]; then
            echo "Failed to run DB Migrations."
            exit 1
          fi
      # Deploy SIMS-API, Workers, Queues, and Web/Frontend in parallel after db-migrations.
      - name: Deploy SIMS-API, Workers, Queues, and Web/Frontend in parallel
        working-directory: "./devops/"
        run: |
          make oc-deploy-api &
          make oc-deploy-workers &
          make oc-deploy-queue-consumers &
          make oc-deploy-web &
      - name: Wait for parallel deployments to finish
        run: |
          wait
