name: Release - Deploy
run-name: Release - Deploy ${{ inputs.gitRef }} to ${{ inputs.environment }} (${{ ((inputs.deployDBMigrations && inputs.deployWeb && inputs.deploySIMSAPI && inputs.deployQueueConsumers && inputs.deployWorkflowWorkers && inputs.deployCamundaDefinitions && inputs.deployFormioDefinitions) && 'Complete deploy') || 'Partial deploy' }})

on:
  workflow_dispatch:
    inputs:
      gitRef:
        description: "Git Tag (e.g. v1.0.0-45)"
        required: true
        default: "v0.0.0-0"
      environment:
        description: "Environment"
        required: true
        type: environment
      deployDBMigrations:
        description: "Deploy Database"
        type: boolean
        default: true
      deployWeb:
        description: "Deploy Web"
        type: boolean
        default: true
      deploySIMSAPI:
        description: "Deploy SIMS-API"
        type: boolean
        default: true
      deployQueueConsumers:
        description: "Deploy Queue Consumers"
        type: boolean
        default: true
      deployWorkflowWorkers:
        description: "Deploy Workflow Workers"
        type: boolean
        default: true
      deployCamundaDefinitions:
        description: "Deploy Camunda BPMN/DMN"
        type: boolean
        default: true
      deployFormioDefinitions:
        description: "Deploy Form.io forms"
        type: boolean
        default: true
  workflow_call:
    inputs:
      gitRef:
        required: true
        type: string
      environment:
        required: true
        type: string
      deployDBMigrations:
        description: "Deploy Database"
        type: boolean
      deployWeb:
        description: "Deploy Web"
        type: boolean
      deploySIMSAPI:
        description: "Deploy SIMS-API"
        type: boolean
      deployQueueConsumers:
        description: "Deploy Queue Consumers"
        type: boolean
      deployWorkflowWorkers:
        description: "Deploy Workflow Workers"
        type: boolean
      deployCamundaDefinitions:
        description: "Deploy Camunda BPMN/DMN"
        type: boolean
      deployFormioDefinitions:
        description: "Deploy Form.io forms"
        type: boolean

    secrets:
      SA_TOKEN:
        required: true
      OPENSHIFT_ENV_NAMESPACE:
        required: true
      HOST_PREFIX:
        required: true
      KEYCLOAK_AUTH_URL:
        required: true
      BCeID_WEB_SERVICE_WSDL:
        required: true
      SITE_MINDER_LOGOUT_URL:
        required: true
      ATBC_LOGIN_ENDPOINT:
        required: true
      ATBC_ENDPOINT:
        required: true
      BYPASS_APPLICATION_SUBMIT_VALIDATIONS:
        required: true
      BYPASS_CRA_INCOME_VERIFICATION:
        required: true
      OPENSHIFT_SIMS_CREDS_NAME:
        required: true
      FORMS_SECRET_NAME:
        required: true
      QUEUE_PREFIX:
        required: true
      API_PORT:
        required: true
      WEB_PORT:
        required: true

env:
  NAMESPACE: ${{ secrets.OPENSHIFT_ENV_NAMESPACE }}
  BUILD_REF: ${{ inputs.gitRef }}
  HOST_PREFIX: ${{ secrets.HOST_PREFIX }}
  BUILD_NAMESPACE: 0c27fb-tools
  KEYCLOAK_REALM: "aestsims"
  KEYCLOAK_AUTH_URL: ${{ secrets.KEYCLOAK_AUTH_URL }}
  BCeID_WEB_SERVICE_WSDL: ${{ secrets.BCeID_WEB_SERVICE_WSDL }}
  SITE_MINDER_LOGOUT_URL: ${{ secrets.SITE_MINDER_LOGOUT_URL }}
  ATBC_LOGIN_ENDPOINT: ${{ secrets.ATBC_LOGIN_ENDPOINT }}
  ATBC_ENDPOINT: ${{ secrets.ATBC_ENDPOINT }}
  SWAGGER_ENABLED: true
  APPLICATION_ARCHIVE_DAYS: 43
  BYPASS_APPLICATION_SUBMIT_VALIDATIONS: ${{ secrets.BYPASS_APPLICATION_SUBMIT_VALIDATIONS }}
  BYPASS_CRA_INCOME_VERIFICATION: ${{ secrets.BYPASS_CRA_INCOME_VERIFICATION }}
  API_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  WORKERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  QUEUE_CONSUMERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  FORMS_SECRET_NAME: ${{ secrets.FORMS_SECRET_NAME }}
  QUEUE_PREFIX: ${{ secrets.QUEUE_PREFIX }}
  API_PORT: ${{ secrets.API_PORT }}
  WEB_PORT: ${{ secrets.WEB_PORT }}
  DATABASE_NAME_KEY: ${{ secrets.DATABASE_NAME_KEY }}

jobs:
  inputs:
    name: Log deploy inputs
    runs-on: ubuntu-latest
    steps:
      - name: Log
        run: |
          echo Git Tag: ${{ inputs.gitRef }}
          echo Environment: ${{ inputs.environment }}
          echo Deploy Database: ${{ inputs.deployDBMigrations }}
          echo Deploy Web: ${{ inputs.deployWeb }}
          echo Deploy SIMS-API: ${{ inputs.deploySIMSAPI }}
          echo Deploy Queue Consumers: ${{ inputs.deployQueueConsumers }}
          echo Deploy Workflow Workers: ${{ inputs.deployWorkflowWorkers }}
          echo Deploy Camunda BPMN/DMN: ${{ inputs.deployCamundaDefinitions }}
          echo Deploy Form.io forms: ${{ inputs.deployFormioDefinitions }}

  # Run DB migrations.
  run-db-migrations:
    if: ${{ inputs.deployDBMigrations}}
    name: Run db-migrations
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Print env
        run: |
          echo Git Environment: ${{ inputs.environment }}
          echo Git Red: ${{ inputs.gitRef }}
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo HOST_PREFIX: $HOST_PREFIX

      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=${{ vars.OPENSHIFT_CLUSTER_URL }}

      - name: Run db-migrations
        working-directory: "./devops/"
        run: |
          make oc-run-db-migrations

  # Deploy SIMS API.
  deploy-sims-api:
    if: ${{ always() && inputs.deploySIMSAPI && (needs.run-db-migrations.result == 'success' || needs.run-db-migrations.result == 'skipped')  }}
    name: Deploy SIMS-API
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: run-db-migrations
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BUILD ENVIRONMENT: ${{ inputs.environment }}
          echo GIT REF: ${{ inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX

      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=${{ vars.OPENSHIFT_CLUSTER_URL }}

      - name: Deploy SIMS-API
        working-directory: "./devops/"
        run: |
          make oc-deploy-api

  # Deploy workers.
  deploy-workers:
    if: ${{ always() && inputs.deployWorkflowWorkers && (needs.run-db-migrations.result == 'success' || needs.run-db-migrations.result == 'skipped')  }}
    name: Deploy Workers
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: run-db-migrations
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BUILD ENVIRONMENT: ${{ inputs.environment }}
          echo GIT REF: ${{ inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX

      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=${{ vars.OPENSHIFT_CLUSTER_URL }}

      - name: Deploy Workers
        working-directory: "./devops/"
        run: |
          make oc-deploy-workers

  # Deploy queue consumers.
  deploy-queue-consumers:
    if: ${{ always() && inputs.deployQueueConsumers && (needs.run-db-migrations.result == 'success' || needs.run-db-migrations.result == 'skipped')  }}
    name: Deploy Queue Consumers
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: run-db-migrations
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BUILD ENVIRONMENT: ${{ inputs.environment }}
          echo GIT REF: ${{ inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX

      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=${{ vars.OPENSHIFT_CLUSTER_URL }}

      - name: Deploy Queue Consumers
        working-directory: "./devops/"
        run: |
          make oc-deploy-queue-consumers

  # Deploy Web/Frontend.
  deploy-web-frontend:
    if: ${{ always() && inputs.deployWeb && (needs.run-db-migrations.result == 'success' || needs.run-db-migrations.result == 'skipped')  }}
    name: Deploy Web/Frontend
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: run-db-migrations
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BUILD ENVIRONMENT: ${{ inputs.environment }}
          echo GIT REF: ${{ inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX

      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=${{ vars.OPENSHIFT_CLUSTER_URL }}

      - name: Deploy Web/Frontend
        working-directory: "./devops/"
        run: |
          make oc-deploy-web

  # Deploy Camunda Definitions
  deployCamundaDefinitions:
    if: ${{ always() && inputs.deployCamundaDefinitions && (needs.deploy-sims-api.result == 'success' || needs.deploy-sims-api.result == 'skipped')  }}
    name: Deploy BPMNs and DMNs to Camunda
    needs: deploy-sims-api
    uses: ./.github/workflows/release-deploy-camunda-definitions.yml
    with:
      environment: ${{ inputs.environment }}
      gitRef: ${{ inputs.gitRef }}
    secrets: inherit

  # Deploy Formio Definitions
  deployFormioDefinitions:
    if: ${{ always() && inputs.deployFormioDefinitions && (needs.deploy-sims-api.result == 'success' || needs.deploy-sims-api.result == 'skipped')  }}
    name: Deploy Form.io definitions
    needs: deploy-sims-api
    uses: ./.github/workflows/release-deploy-formio-definitions.yml
    with:
      environment: ${{ inputs.environment }}
      gitRef: ${{ inputs.gitRef }}
    secrets: inherit
