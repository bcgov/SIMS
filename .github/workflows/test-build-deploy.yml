name: Test Build and Deploy
on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      bumb:
        description: "The type of semantic version increment to make. One of major, premajor, minor, preminor, patch, prepatch, or prerelease. By default it is 'prerelease'"
        required: false
        default: "prerelease"
        type: choice
        options:
          - major
          - premajor
          - minor
          - preminor
          - patch
          - prepatch
          - prerelease
      preId:
        description: "Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. By default it is 'prerelease' for pull request event and workflow dispatch will follow the release tag prefix, if any"
        required: false
        type: choice
        options:
          -
          - premajor
          - preminor
          - prepatch
          - prerelease
      releaseType:
        description: "Select the release type. By default only tag will be created. if you want to create a release with the tag select the type."
        type: choice
        required: false
        options:
          -
          - draft
          - publish


jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    environment: DEV
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Build ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)

  # todo: check the naming format of variable
  # Create new tag.
  createTag:
    name: "Create tag"
    if:  github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' 
    runs-on: ubuntu-latest
    steps:
      - name: Get bumb value
        uses: haya14busa/action-cond@v1
        id: getBumb
        with:
          cond: ${{ github.event_name == 'workflow_dispatch'}}
          if_true: ${{ inputs.bumb }}
          if_false: 'prerelease'

      - name: Get bumb value, if provided
        uses: haya14busa/action-cond@v1
        id: getPreId
        with:
          cond: ${{ github.event_name == 'workflow_dispatch'}}
          if_true: ${{ inputs.preId }}
          if_false: 'prerelease'
      - run: |
          echo "bumb: ${{ steps.getBumb.outputs.value }}"
          echo "prefix: ${{ steps.getPreId.outputs.value }}"
  
      - id: createNextTag
        name: "Create tag"
        uses: zwaldowski/semver-release-action@v3
        with: 
          prefix: "v"
          preid: ${{ steps.getPreId.outputs.value }}       
          bump:  ${{ steps.getBumb.outputs.value }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "Tag ${{ steps.createNextTag.outputs.version_tag }} created!"
    outputs:
      newTag: ${{ steps.createNextTag.outputs.version_tag }}


  # Create new release.
  createRelease:
    name: "Create release"
    if: github.event_name == 'workflow_dispatch' && (inputs.releaseType == 'publish' || inputs.releaseType == 'draft')
    runs-on: ubuntu-latest
    needs: createTag
    steps:
      - name: Create release
        id: createNewRelease
        uses: Roang-zero1/github-create-release-action@v3
        with:
          created_tag: ${{ needs.createTag.outputs.newTag }}
          create_draft: ${{ inputs.releaseType == 'draft' }}
          release_title:  Release ${{ needs.createTag.outputs.newTag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "created release ${{ needs.createTag.outputs.newTag }} ${{ steps.createNewRelease.outputs.html_url }}!"



  # Building all packages
  build:
    name: Building all packages
    environment: DEV
    runs-on: ubuntu-latest
    needs: createTag
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' 
    env:
      BUILD_ID: ${{ github.event.number }}
      BUILD_NAMESPACE: 0c27fb-tools
      BUILD_REF: ${{ needs.createTag.outputs.newTag }}
      HOST_PREFIX: ${{ secrets.HOST_PREFIX }}
    steps:
      # Checkout the PR branch
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BUILD_REF
      - name: Checkout Target Branch
        uses: actions/checkout@v3
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
      # Build the images
      - name: Build SIMS-API Image
        working-directory: "./devops"
        run: |
          make oc-build-api
      - name: Build Workers Image
        working-directory: "./devops"
        run: |
          make oc-build-workers
      - name: Build Queue Consumers Image
        working-directory: "./devops"
        run: |
          make oc-build-queue-consumers
      - name: Build Web/Frontend Image
        working-directory: "./devops"
        run: |
          make oc-build-web

  # Deploying all packages
  deployDev:
    name: Deploying all packages
    runs-on: ubuntu-latest
    environment: DEV
    needs:
      - build
      - createTag
    env:
      BUILD_ID: ""
      NAMESPACE: ${{ secrets.OPENSHIFT_ENV_NAMESPACE }}
      BUILD_REF: ${{ needs.createTag.outputs.newTag }}
      HOST_PREFIX: ${{ secrets.HOST_PREFIX }}
      BUILD_NAMESPACE: 0c27fb-tools
      KEYCLOAK_REALM: "aestsims"
      KEYCLOAK_AUTH_URL: ${{ secrets.KEYCLOAK_AUTH_URL }}
      BCeID_WEB_SERVICE_WSDL: ${{ secrets.BCeID_WEB_SERVICE_WSDL }}
      SITE_MINDER_LOGOUT_URL: ${{ secrets.SITE_MINDER_LOGOUT_URL }}
      ATBC_LOGIN_ENDPOINT: ${{ secrets.ATBC_LOGIN_ENDPOINT }}
      ATBC_ENDPOINT: ${{ secrets.ATBC_ENDPOINT }}
      SWAGGER_ENABLED: true
      APPLICATION_ARCHIVE_DAYS: 43
      BYPASS_APPLICATION_SUBMIT_VALIDATIONS: ${{ secrets.BYPASS_APPLICATION_SUBMIT_VALIDATIONS }}
      BYPASS_CRA_INCOME_VERIFICATION: ${{ secrets.BYPASS_CRA_INCOME_VERIFICATION }}
      API_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
      WORKERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
      QUEUE_CONSUMERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
      FORMS_SECRET_NAME: ${{ secrets.FORMS_SECRET_NAME }}
      QUEUE_PREFIX: ${{ secrets.QUEUE_PREFIX }}
      API_PORT: ${{ secrets.API_PORT }}
      WEB_PORT: ${{ secrets.WEB_PORT }}
      API: ${{ format('{0}api-sims', secrets.HOST_PREFIX) }}
      WEB: ${{ format('{0}web-sims', secrets.HOST_PREFIX) }}
      WORKERS: ${{ format('{0}workers-sims', secrets.HOST_PREFIX) }}
      QUEUE_CONSUMERS: ${{ format('{0}queue-consumers-sims', secrets.HOST_PREFIX) }}
      SWAGGER_NAME: ${{ format('{0}swagger', secrets.HOST_PREFIX) }}
      DATABASE_NAME_KEY: ${{ secrets.DATABASE_NAME_KEY }}
    steps:
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo NAMESPACE: $NAMESPACE
          echo BRANCH: $BUILD_REF
          echo HOST_PREFIX: $HOST_PREFIX
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v1
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
      # Deploy SIMS-Api
      - name: Deploy SIMS-API
        working-directory: "./devops/"
        run: |
          make oc-deploy-api
      # Deploy Workers
      - name: Deploy Workers
        working-directory: "./devops/"
        run: |
          make oc-deploy-workers
      # Deploy Queue Consumers
      - name: Deploy Queue Consumers
        working-directory: "./devops/"
        run: |
          make oc-deploy-queue-consumers
      # Deploy Deploy Web/Frontend
      - name: Deploy Web/Frontend
        working-directory: "./devops/"
        run: |
          make oc-deploy-web
