name: Revert Release Cycle

on:
  workflow_dispatch:
    inputs:
      gitRef:
        description: 'Version of the release to revert'
        required: true
      environment:
        description: "Environment"
        required: true
        type: environment
      revert_run_db_migration:
        description: "Run DB migration revert"
        required: false
        default: false
        type: boolean
      deployCamundaDefinitions:
        description: "Deploy Camunda BPMN/DMN from main"
        type: boolean
        default: true
      deployFormioDefinitions:
        description: "Deploy Form.io forms from main"
        type: boolean
        default: true

env:
  NAMESPACE: ${{ secrets.OPENSHIFT_ENV_NAMESPACE }}
  BUILD_REF: ${{ github.event.inputs.gitRef }}
  HOST_PREFIX: ${{ secrets.HOST_PREFIX }}
  BUILD_NAMESPACE: 0c27fb-tools
  KEYCLOAK_REALM: "aestsims"
  KEYCLOAK_AUTH_URL: ${{ secrets.KEYCLOAK_AUTH_URL }}
  BCeID_WEB_SERVICE_WSDL: ${{ secrets.BCeID_WEB_SERVICE_WSDL }}
  SITE_MINDER_LOGOUT_URL: ${{ secrets.SITE_MINDER_LOGOUT_URL }}
  ATBC_LOGIN_ENDPOINT: ${{ secrets.ATBC_LOGIN_ENDPOINT }}
  ATBC_ENDPOINT: ${{ secrets.ATBC_ENDPOINT }}
  SWAGGER_ENABLED: true
  APPLICATION_ARCHIVE_DAYS: 43
  BYPASS_APPLICATION_SUBMIT_VALIDATIONS: ${{ secrets.BYPASS_APPLICATION_SUBMIT_VALIDATIONS }}
  BYPASS_CRA_INCOME_VERIFICATION: ${{ secrets.BYPASS_CRA_INCOME_VERIFICATION }}
  API_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  WORKERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  QUEUE_CONSUMERS_SECRET_NAME: ${{ secrets.OPENSHIFT_SIMS_CREDS_NAME }}
  FORMS_SECRET_NAME: ${{ secrets.FORMS_SECRET_NAME }}
  QUEUE_PREFIX: ${{ secrets.QUEUE_PREFIX }}
  API_PORT: ${{ secrets.API_PORT }}
  WEB_PORT: ${{ secrets.WEB_PORT }}
  DATABASE_NAME_KEY: ${{ secrets.DATABASE_NAME_KEY }}

jobs:
  #Calculate release cycle version from the latest version
  revert_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get latest release
        id: get_latest_release
        run: |
          latest_release=$(git describe --abbrev=0 --tags)
          echo "::set-output name=latest_release::${latest_release}"

      - name: Validate release version
        id: validate_release
        run: |
          latest_release="${{ steps.get_latest_release.outputs.latest_release }}"
          revert_release="${{ github.event.inputs.gitRef }}"
          if [[ "${revert_release}" == "${latest_release}" ]]; then
            echo "Error: Cannot revert the latest release."
            exit 1
          fi
          if [[ "${revert_release}" > "${latest_release}" ]]; then
            echo "Error: Revert release version is newer than the latest release."
            exit 1
          fi
        
      - name: Calculate version difference
        id: version_difference
        run: |
          latest_release="${{ steps.get_latest_release.outputs.latest_release }}"
          revert_release="${{ github.event.inputs.gitRef }}"
          version_difference=$(git rev-list --count ${latest_release}..${revert_release})
          echo "::set-output name=version_difference::${version_difference}"
  
  # Build REVERT DB migrations.
  build-revert-db-migrations:
    name: Build revert-db-migrations
    environment: ${{ github.event.inputs.environment }}
    if: ${{ github.event.inputs.revert_run_db_migration == 'true' }}
    runs-on: ubuntu-latest
    needs: createTag
    steps:
      - name: Confirm revert
        id: confirmation
        run: |
          echo "Are you sure you want to run the revert on DB Migration/ the current state of DB backup is complete?"
          read -r -p "Type 'yes' to confirm: " confirm
          echo "::set-output name=confirm::${confirm}"

      - name: Check confirmation
        id: check_confirmation
        run: |
          if [[ "${{ steps.confirmation.outputs.confirm }}" != "yes" ]]; then
            echo "Revert cancelled."
            exit 0
          fi
          
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: ${{ github.event.inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX
          
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Build revert-db-migrations Image
        working-directory: "./devops"
        run: |
          make oc-build-revert-db-migrations

  # Revert DB Migrations
  revert_db_migration:
    needs: revert_release
    environment: ${{ github.event.inputs.environment }}
    if: ${{ github.event.inputs.revert_run_db_migration == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: ${{ github.event.inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX
          
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Revert db-migrations
        working-directory: "./devops/"
        run: |
          make oc-revert-db-migrations VERSION_DIFFERENCE=${{ needs.revert_release.outputs.version_difference }}

  # Deploy SIMS API.
  deploy-sims-api:
    name: Deploy SIMS-API
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: revert_db_migration
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: ${{ github.event.inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX
          
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Deploy SIMS-API
        working-directory: "./devops/"
        run: |
          make oc-deploy-api

  # Deploy workers.
  deploy-workers:
    name: Deploy Workers
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: revert_db_migration
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: ${{ github.event.inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX
          
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Deploy Workers
        working-directory: "./devops/"
        run: |
          make oc-deploy-workers

  # Deploy queue consumers.
  deploy-queue-consumers:
    name: Deploy Queue Consumers
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: revert_db_migration
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: ${{ github.event.inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX
          
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Deploy Queue Consumers
        working-directory: "./devops/"
        run: |
          make oc-deploy-queue-consumers

  # Deploy Web/Frontend.
  deploy-web-frontend:
    name: Deploy Web/Frontend
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: revert_db_migration
    steps:
      - name: Print env
        run: |
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: ${{ github.event.inputs.gitRef }}
          echo HOST_PREFIX: $HOST_PREFIX
          
      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.gitRef }}

      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443
      
      - name: Deploy Web/Frontend
        working-directory: "./devops/"
        run: |
          make oc-deploy-web

  # Deploy Camunda Definitions
  deployCamundaDefinitions:
    if: ${{ github.event.inputs.deployCamundaDefinitions == 'true' }}
    name: Deploy BPMNs and DMNs to Camunda
    needs: deploy-sims-api
    uses: ./.github/workflows/deploy-camunda-definitions.yml
    with:
      environment: ${{ github.event.inputs.environment }}
      gitRef: ${{ github.event.inputs.gitRef }}
    secrets: inherit

  # Deploy Formio Definitions
  deployFormioDefinitions:
    if: ${{ github.event.inputs.deployFormioDefinitions == 'true' }}
    name: Deploy Form.io definitions
    needs: deploy-sims-api
    uses: ./.github/workflows/deploy-formio-definitions.yml
    with:
      environment: ${{ github.event.inputs.environment }}
      gitRef: ${{ github.event.inputs.gitRef }}
    secrets: inherit